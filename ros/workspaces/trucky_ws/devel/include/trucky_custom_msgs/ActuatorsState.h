// Generated by gencpp from file trucky_custom_msgs/ActuatorsState.msg
// DO NOT EDIT!


#ifndef TRUCKY_CUSTOM_MSGS_MESSAGE_ACTUATORSSTATE_H
#define TRUCKY_CUSTOM_MSGS_MESSAGE_ACTUATORSSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace trucky_custom_msgs
{
template <class ContainerAllocator>
struct ActuatorsState_
{
  typedef ActuatorsState_<ContainerAllocator> Type;

  ActuatorsState_()
    : servo_pwm_high_time(0)
    , motor_pwm_high_time(0)
    , output_mode()  {
    }
  ActuatorsState_(const ContainerAllocator& _alloc)
    : servo_pwm_high_time(0)
    , motor_pwm_high_time(0)
    , output_mode(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _servo_pwm_high_time_type;
  _servo_pwm_high_time_type servo_pwm_high_time;

   typedef int64_t _motor_pwm_high_time_type;
  _motor_pwm_high_time_type motor_pwm_high_time;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _output_mode_type;
  _output_mode_type output_mode;





  typedef boost::shared_ptr< ::trucky_custom_msgs::ActuatorsState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trucky_custom_msgs::ActuatorsState_<ContainerAllocator> const> ConstPtr;

}; // struct ActuatorsState_

typedef ::trucky_custom_msgs::ActuatorsState_<std::allocator<void> > ActuatorsState;

typedef boost::shared_ptr< ::trucky_custom_msgs::ActuatorsState > ActuatorsStatePtr;
typedef boost::shared_ptr< ::trucky_custom_msgs::ActuatorsState const> ActuatorsStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::trucky_custom_msgs::ActuatorsState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::trucky_custom_msgs::ActuatorsState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::trucky_custom_msgs::ActuatorsState_<ContainerAllocator1> & lhs, const ::trucky_custom_msgs::ActuatorsState_<ContainerAllocator2> & rhs)
{
  return lhs.servo_pwm_high_time == rhs.servo_pwm_high_time &&
    lhs.motor_pwm_high_time == rhs.motor_pwm_high_time &&
    lhs.output_mode == rhs.output_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::trucky_custom_msgs::ActuatorsState_<ContainerAllocator1> & lhs, const ::trucky_custom_msgs::ActuatorsState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace trucky_custom_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::trucky_custom_msgs::ActuatorsState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trucky_custom_msgs::ActuatorsState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trucky_custom_msgs::ActuatorsState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trucky_custom_msgs::ActuatorsState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trucky_custom_msgs::ActuatorsState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trucky_custom_msgs::ActuatorsState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::trucky_custom_msgs::ActuatorsState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4b99dd1ce38e6a3931dbead99360d717";
  }

  static const char* value(const ::trucky_custom_msgs::ActuatorsState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4b99dd1ce38e6a39ULL;
  static const uint64_t static_value2 = 0x31dbead99360d717ULL;
};

template<class ContainerAllocator>
struct DataType< ::trucky_custom_msgs::ActuatorsState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "trucky_custom_msgs/ActuatorsState";
  }

  static const char* value(const ::trucky_custom_msgs::ActuatorsState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::trucky_custom_msgs::ActuatorsState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 servo_pwm_high_time \n"
"int64 motor_pwm_high_time\n"
"string output_mode\n"
;
  }

  static const char* value(const ::trucky_custom_msgs::ActuatorsState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::trucky_custom_msgs::ActuatorsState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.servo_pwm_high_time);
      stream.next(m.motor_pwm_high_time);
      stream.next(m.output_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActuatorsState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::trucky_custom_msgs::ActuatorsState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::trucky_custom_msgs::ActuatorsState_<ContainerAllocator>& v)
  {
    s << indent << "servo_pwm_high_time: ";
    Printer<int64_t>::stream(s, indent + "  ", v.servo_pwm_high_time);
    s << indent << "motor_pwm_high_time: ";
    Printer<int64_t>::stream(s, indent + "  ", v.motor_pwm_high_time);
    s << indent << "output_mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.output_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRUCKY_CUSTOM_MSGS_MESSAGE_ACTUATORSSTATE_H
