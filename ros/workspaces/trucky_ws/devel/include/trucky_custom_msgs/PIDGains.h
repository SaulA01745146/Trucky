// Generated by gencpp from file trucky_custom_msgs/PIDGains.msg
// DO NOT EDIT!


#ifndef TRUCKY_CUSTOM_MSGS_MESSAGE_PIDGAINS_H
#define TRUCKY_CUSTOM_MSGS_MESSAGE_PIDGAINS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace trucky_custom_msgs
{
template <class ContainerAllocator>
struct PIDGains_
{
  typedef PIDGains_<ContainerAllocator> Type;

  PIDGains_()
    : kp(0.0)
    , kd(0.0)
    , ki(0.0)  {
    }
  PIDGains_(const ContainerAllocator& _alloc)
    : kp(0.0)
    , kd(0.0)
    , ki(0.0)  {
  (void)_alloc;
    }



   typedef float _kp_type;
  _kp_type kp;

   typedef float _kd_type;
  _kd_type kd;

   typedef float _ki_type;
  _ki_type ki;





  typedef boost::shared_ptr< ::trucky_custom_msgs::PIDGains_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trucky_custom_msgs::PIDGains_<ContainerAllocator> const> ConstPtr;

}; // struct PIDGains_

typedef ::trucky_custom_msgs::PIDGains_<std::allocator<void> > PIDGains;

typedef boost::shared_ptr< ::trucky_custom_msgs::PIDGains > PIDGainsPtr;
typedef boost::shared_ptr< ::trucky_custom_msgs::PIDGains const> PIDGainsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::trucky_custom_msgs::PIDGains_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::trucky_custom_msgs::PIDGains_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::trucky_custom_msgs::PIDGains_<ContainerAllocator1> & lhs, const ::trucky_custom_msgs::PIDGains_<ContainerAllocator2> & rhs)
{
  return lhs.kp == rhs.kp &&
    lhs.kd == rhs.kd &&
    lhs.ki == rhs.ki;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::trucky_custom_msgs::PIDGains_<ContainerAllocator1> & lhs, const ::trucky_custom_msgs::PIDGains_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace trucky_custom_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::trucky_custom_msgs::PIDGains_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trucky_custom_msgs::PIDGains_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trucky_custom_msgs::PIDGains_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trucky_custom_msgs::PIDGains_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trucky_custom_msgs::PIDGains_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trucky_custom_msgs::PIDGains_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::trucky_custom_msgs::PIDGains_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8dfae169c05c8647d6140e2a6c279a75";
  }

  static const char* value(const ::trucky_custom_msgs::PIDGains_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8dfae169c05c8647ULL;
  static const uint64_t static_value2 = 0xd6140e2a6c279a75ULL;
};

template<class ContainerAllocator>
struct DataType< ::trucky_custom_msgs::PIDGains_<ContainerAllocator> >
{
  static const char* value()
  {
    return "trucky_custom_msgs/PIDGains";
  }

  static const char* value(const ::trucky_custom_msgs::PIDGains_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::trucky_custom_msgs::PIDGains_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 kp \n"
"float32 kd\n"
"float32 ki\n"
;
  }

  static const char* value(const ::trucky_custom_msgs::PIDGains_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::trucky_custom_msgs::PIDGains_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.kp);
      stream.next(m.kd);
      stream.next(m.ki);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PIDGains_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::trucky_custom_msgs::PIDGains_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::trucky_custom_msgs::PIDGains_<ContainerAllocator>& v)
  {
    s << indent << "kp: ";
    Printer<float>::stream(s, indent + "  ", v.kp);
    s << indent << "kd: ";
    Printer<float>::stream(s, indent + "  ", v.kd);
    s << indent << "ki: ";
    Printer<float>::stream(s, indent + "  ", v.ki);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRUCKY_CUSTOM_MSGS_MESSAGE_PIDGAINS_H
